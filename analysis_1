"""
analysis.py
============
Peak detection and heart rate / HRV analysis.

Author: (Your Name)

Educational overview:
---------------------
This module is where physiological signal processing happens.
It identifies heart beats (R-peaks or PPG peaks),
then derives key metrics:
- Heart Rate (HR)
- RR intervals
- Heart Rate Variability (HRV)

These measures reflect cardiac function and autonomic balance.
"""

import numpy as np
from scipy.signal import find_peaks


def detect_peaks(signal, fs, min_bpm=30, max_bpm=220, prominence=0.3, distance_s=0.4):
    """
    Detect R-peaks or pulse peaks using scipy.signal.find_peaks.

    Parameters
    ----------
    signal : np.ndarray
        Input signal
    fs : float
        Sampling frequency (Hz)
    min_bpm, max_bpm : float
        Physiological limits for valid heart rates
    prominence : float
        Peak prominence threshold (how strong a peak must be)
    distance_s : float
        Minimum distance between peaks in seconds (prevents double detections)

    Returns
    -------
    peaks : np.ndarray
        Indices of detected peaks
    properties : dict
        Additional properties from scipy.find_peaks
    """
    distance_samples = int(distance_s * fs)
    peaks, properties = find_peaks(signal, distance=distance_samples, prominence=prominence)
    return peaks, properties


def compute_hr_and_rr(peaks, t):
    """
    Compute heart rate (HR) and RR intervals from detected peaks.

    RR intervals = time differences between consecutive beats.

    HR = 60 / mean(RR)
    """
    if len(peaks) < 2:
        return 0.0, np.array([])

    times = t[peaks]
    rr = np.diff(times)
    hr = 60.0 / np.mean(rr)
    return hr, rr


def compute_hrv(rr_intervals_s):
    """
    Compute heart rate variability (HRV) metrics.

    Metric: SDNN (standard deviation of RR intervals)

    Educational note:
    -----------------
    HRV reflects how much the heart rhythm varies over time.
    High HRV = healthy autonomic flexibility.
    Low HRV = stress or reduced vagal tone.
    """
    if rr_intervals_s.size == 0:
        return np.nan

    sdnn = np.std(rr_intervals_s) * 1000.0  # convert to ms
    return sdnn


def classify_rhythm(hr_bpm, hrv_sdnn_ms, hr_threshold=(40, 110), hrv_threshold=150):
    """
    Simple rule-based classification of heart rhythm.

    Educational rules:
    ------------------
    - Bradycardia: HR < 40 bpm
    - Tachycardia: HR > 110 bpm
    - Irregular rhythm: HRV too high (SDNN > 150 ms)
    - Otherwise: Normal
    """
    if hr_bpm == 0:
        return "no-detection"
    if hr_bpm < hr_threshold[0]:
        return "bradycardia"
    if hr_bpm > hr_threshold[1]:
        return "tachycardia"
    if hrv_sdnn_ms > hrv_threshold:
        return "irregular"
    return "normal"

